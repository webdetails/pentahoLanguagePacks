# Copyright 2008 - 2010 Pentaho Corporation.  All rights reserved.
# This program is free software; you can redistribute it and/or modify it under the 
# terms of the GNU General Public License, version 2 as published by the Free Software 
# Foundation.
#
# You should have received a copy of the GNU General Public License along with this 
# program; if not, you can obtain a copy at http://www.gnu.org/licenses/gpl-2.0.html 
# or from the Free Software Foundation, Inc., 
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.

AbstractRepositoryLifecycleManager.ERROR_0001_STARTUP_NOT_CALLED=startup must be called first<TRANSLATE ME>
MondrianRepositoryLifecycleManager.USER_0001_VER_COMMENT_MONDRIAN=[system] created mondrian folder<TRANSLATE ME>
PdiRepositoryLifecycleManager.USER_0001_VER_COMMENT_PDI=[system] created pdi folder<TRANSLATE ME>
PdiRepositoryLifecycleManager.USER_0002_VER_COMMENT_DATABASES=[system] created databases folder<TRANSLATE ME>
PdiRepositoryLifecycleManager.USER_0003_VER_COMMENT_SLAVESERVERS=[system] created slaveServers folder<TRANSLATE ME>
PdiRepositoryLifecycleManager.USER_0004_CLUSTERSCHEMAS=[system] created clusterSchemas folder<TRANSLATE ME>
PdiRepositoryLifecycleManager.USER_0005_PARTITIONSCHEMAS=[system] created partitionSchemas folder<TRANSLATE ME>
PentahoJcrTemplate.ERROR_0001_ACCESS_DENIED=Access denied to this data<TRANSLATE ME>
DefaultRepositoryLifecycleManager.USER_0001_VER_COMMENT_PENTAHO_ROOT=[system] created pentaho root folder<TRANSLATE ME>
DefaultRepositoryLifecycleManager.USER_0002_VER_COMMENT_TENANT_ROOT=[system] created tenant root folder<TRANSLATE ME>
DefaultRepositoryLifecycleManager.USER_0003_TENANT_PUBLIC=[system] created tenant public folder<TRANSLATE ME>
DefaultRepositoryLifecycleManager.USER_0004_TENANT_HOME=[system] created tenant home folder<TRANSLATE ME>
DefaultRepositoryLifecycleManager.USER_0005_TENANT_ETC=[system] created tenant etc folder<TRANSLATE ME>
DefaultRepositoryLifecycleManager.USER_0006_USER_HOME=[system] created user home folder<TRANSLATE ME>
DefaultUnifiedRepositoryWebService.ERROR_0001_NO_IMPL=no IUnifiedRepository implementation<TRANSLATE ME>
ExceptionLoggingDecorator.lockException=lock error while {0}\n\nReference number: {1}<TRANSLATE ME>
ExceptionLoggingDecorator.transactionException=transaction error while {0}\n\nReference number: {1}<TRANSLATE ME>
ExceptionLoggingDecorator.accessDeniedException=access denied while {0}\n\nReference number: {1}<TRANSLATE ME>
ExceptionLoggingDecorator.referentialIntegrityException=referential integrity error while {0}; (file {1} is being referenced by file(s) {2})\n\nReference number: {3}<TRANSLATE ME>
ExceptionLoggingDecorator.fileExistsException=file already exists error while {0}; path is "{1}"\n\nReference number: {2}<TRANSLATE ME>
ExceptionLoggingDecorator.malformedNameException=malformed name error while {0}; invalid name: "{1}"\n\nReference number: {2}<TRANSLATE ME>
ExceptionLoggingDecorator.canUnlockFile=determining ability to unlock file with id "{0}"<TRANSLATE ME>
ExceptionLoggingDecorator.createFile=creating file with name "{0}"<TRANSLATE ME>
ExceptionLoggingDecorator.createFolder=creating folder with name "{0}"<TRANSLATE ME>
ExceptionLoggingDecorator.deleteFile=deleting file with id "{0}"<TRANSLATE ME>
ExceptionLoggingDecorator.deleteFileAtVersion=deleting file with id "{0}" and version id "{1}"<TRANSLATE ME>
ExceptionLoggingDecorator.generalException=exception while {0}\n\nReference number: {1}<TRANSLATE ME>
ExceptionLoggingDecorator.getAcl=getting ACL for file with id "{0}"<TRANSLATE ME>
ExceptionLoggingDecorator.getChildren=getting children for folder with id "{0}"<TRANSLATE ME>
ExceptionLoggingDecorator.getData=getting data for file with id "{0}"<TRANSLATE ME>
ExceptionLoggingDecorator.getDataInBatch=getting data for files<TRANSLATE ME>
ExceptionLoggingDecorator.getDataAtVersion=getting data for file with id "{0}" and version id "{0}"<TRANSLATE ME>
ExceptionLoggingDecorator.getDeletedFiles=getting all deleted files<TRANSLATE ME>
ExceptionLoggingDecorator.getDeletedFilesInFolder=getting deleted files in folder with path "{0}"<TRANSLATE ME>
ExceptionLoggingDecorator.getEffectiveAces=getting effective ACEs for file with id "{0}"<TRANSLATE ME>
ExceptionLoggingDecorator.getFile=getting file with path "{0}"<TRANSLATE ME>
ExceptionLoggingDecorator.getReferrers=getting referrers for file with id "{0}"<TRANSLATE ME>
ExceptionLoggingDecorator.getTree=getting tree rooted at path "{0}"<TRANSLATE ME>
ExceptionLoggingDecorator.getFileAtVersion=getting file with id "{0}" and version id "{1}"<TRANSLATE ME>
ExceptionLoggingDecorator.getFileById=getting file with id "{0}"<TRANSLATE ME>
ExceptionLoggingDecorator.getVersionSummaries=getting version history for file with id "{0}"<TRANSLATE ME>
ExceptionLoggingDecorator.getVersionSummary=getting version information for file with id "{0}" and version id "{1}"<TRANSLATE ME>
ExceptionLoggingDecorator.getVersionSummaryInBatch=getting version information for files<TRANSLATE ME>
ExceptionLoggingDecorator.hasAccess=determining access for file with path "{0}"<TRANSLATE ME>
ExceptionLoggingDecorator.lockFile=locking file with id "{0}"<TRANSLATE ME>
ExceptionLoggingDecorator.moveFile=moving file with id "{0}" to destination path "{1}"<TRANSLATE ME>
ExceptionLoggingDecorator.copyFile=copying file with id "{0}" to destination path "{1}"<TRANSLATE ME>
ExceptionLoggingDecorator.referenceNumber=Reference number: {0}<TRANSLATE ME>
ExceptionLoggingDecorator.restoreFileAtVersion=restoring file with file id "{0}" and version id "{1}"<TRANSLATE ME>
ExceptionLoggingDecorator.undeleteFile=undeleting file with id "{0}"<TRANSLATE ME>
ExceptionLoggingDecorator.unlockFile=unlocking file with id "{0}"<TRANSLATE ME>
ExceptionLoggingDecorator.updateAcl=updating ACL for file with id "{0}"<TRANSLATE ME>
ExceptionLoggingDecorator.updateFile=updating file with id "{0}"<TRANSLATE ME>
ExceptionLoggingDecorator.getReservedChars=getting reserved characters<TRANSLATE ME>
ExceptionLoggingDecorator.getAvailableLocalesForFile=getting available locales for file "{0}"<TRANSLATE ME>
ExceptionLoggingDecorator.getLocalePropertiesForFile=getting locale properties for file "{0}"<TRANSLATE ME>
ExceptionLoggingDecorator.setLocalePropertiesForFile=setting locale properties for file "{0}"<TRANSLATE ME>
ExceptionLoggingDecorator.deleteLocalePropertiesForFile=deleting locale properties for file "{0}"<TRANSLATE ME>
FileImporter.WARN_0001_NO_EXT=skipping {0} because file has no extension<TRANSLATE ME>
FileImporter.WARN_0002_NO_CONVERTER=skipping {0} because no converter found for extension<TRANSLATE ME>
FileImporter.WARN_0003_IOEXCEPTION=skipping {0} due to exception<TRANSLATE ME>
FileImporter.WARN_0004_NO_MIME=skipping {0} because no MIME type found for extension<TRANSLATE ME>
FileImporter.USER_0001_IMPORT_COUNT=imported {0} of {1} files ({2} ms)<TRANSLATE ME>
FileImporter.ERROR_0001_ERROR_RETRIEVING_FILES=Error retrieving files<TRANSLATE ME>
FileImporter.ERROR_0002_ERROR_IMPORTING_FILE=Error importing file {1}: {0}<TRANSLATE ME>
JackrabbitRepositoryFileAclDao.ERROR_0001_NODE_NOT_FOUND=node with id [{0}] not found<TRANSLATE ME>
JackrabbitRepositoryFileAclDao.ERROR_0002_POLICY=most likely due to calling readAclById before calling createAcl<TRANSLATE ME>
JackrabbitRepositoryFileAclDao.USER_0001_VER_COMMENT_CREATED_ACL=[system] created ACL<TRANSLATE ME>
JackrabbitRepositoryFileAclDao.USER_0002_VER_COMMENT_UPDATED_ACL=[system] updated ACL<TRANSLATE ME>
JcrRepositoryFileDao.ERROR_0001_NO_TRANSFORMER=no transformer found<TRANSLATE ME>
JcrRepositoryFileDao.ERROR_0002_CANNOT_OVERWRITE_FILE_WITH_FOLDER=cannot overwrite file with folder<TRANSLATE ME>
JcrRepositoryFileDao.ERROR_0003_ILLEGAL_DEST_PATH=illegal destination path<TRANSLATE ME>
JcrRepositoryFileDao.ERROR_0004_PARENT_MUST_EXIST=immediate parent folder of destination path must exist<TRANSLATE ME>
JcrRepositoryFileDao.ERROR_0005_PARENT_MUST_BE_FOLDER=immediate parent of destination path is not a folder<TRANSLATE ME>
JcrRepositoryFileDao.USER_0001_VER_COMMENT_ADD_FOLDER=[system] added child folder ''{0}'' to {1}<TRANSLATE ME>
JcrRepositoryFileDao.USER_0002_VER_COMMENT_ADD_FILE=[system] added child file ''{0}'' to {1}<TRANSLATE ME>
JcrRepositoryFileDao.USER_0003_VER_COMMENT_LOCK_FILE=[system] locked file with id={0}<TRANSLATE ME>
JcrRepositoryFileDao.LOCALE_0001_UPDATE_PROPERTIES=update locale properies for id={0}<TRANSLATE ME>
JcrRepositoryFileDao.LOCALE_0002_DELETE_PROPERTIES=delete locale properies for id={0}<TRANSLATE ME>
JcrRepositoryFileUtils.ERROR_0001_MISSING_EXT=file names must have an extension<TRANSLATE ME>
JcrRepositoryFileUtils.USER_0001_VER_COMMENT_UNLOCK_FILE=[system] unlocked file with id={0}<TRANSLATE ME>
XmlAdapter.ERROR_0001_MARSHAL=error marshalling {0} to {1}<TRANSLATE ME>
XmlAdapter.ERROR_0002_UNMARSHAL=error unmarshalling {0} to {1}<TRANSLATE ME>
DefaultDeleteHelper.ERROR_0001_PATH_NOT_FOUND=cannot determine original parent folder ID since original parent folder path does not exist<TRANSLATE ME>
DefaultDeleteHelper.ERROR_0002_NOT_CLEAN=this should have been cleaned up on undelete or permanent delete<TRANSLATE ME>
JcrRepositoryFileDao.ERROR_0006_ACCESS_DENIED_DELETE=Access denied while deleting file with id [ {0} ]<TRANSLATE ME>
DefaultUnifiedRepository.ERROR_0001_ACCESS_DENIED_UPDATE_ACL=Access denied while updating permissions on file with id [ {0} ]<TRANSLATE ME>
